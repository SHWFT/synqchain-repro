// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/(app)/analytics/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/analytics/page.js")
  handler satisfies AppPageConfig<"/analytics">
}

// Validate ../../app/(app)/approvals/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/approvals/page.js")
  handler satisfies AppPageConfig<"/approvals">
}

// Validate ../../app/(app)/connector-playground/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/connector-playground/page.js")
  handler satisfies AppPageConfig<"/connector-playground">
}

// Validate ../../app/(app)/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../app/(app)/po/[poId]/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/po/[poId]/page.js")
  handler satisfies AppPageConfig<"/po/[poId]">
}

// Validate ../../app/(app)/po/new/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/po/new/page.js")
  handler satisfies AppPageConfig<"/po/new">
}

// Validate ../../app/(app)/po/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/po/page.js")
  handler satisfies AppPageConfig<"/po">
}

// Validate ../../app/(app)/projects/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/projects/page.js")
  handler satisfies AppPageConfig<"/projects">
}

// Validate ../../app/(app)/settings/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/settings/page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ../../app/(app)/supplier-portal/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/supplier-portal/page.js")
  handler satisfies AppPageConfig<"/supplier-portal">
}

// Validate ../../app/(app)/suppliers/page.tsx
{
  const handler = {} as typeof import("../../app/(app)/suppliers/page.js")
  handler satisfies AppPageConfig<"/suppliers">
}

// Validate ../../app/(auth)/login/page.tsx
{
  const handler = {} as typeof import("../../app/(auth)/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/api/analytics/kpis/route.ts
{
  const handler = {} as typeof import("../../app/api/analytics/kpis/route.js")
  handler satisfies RouteHandlerConfig<"/api/analytics/kpis">
}

// Validate ../../app/api/auth/login/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/login/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/login">
}

// Validate ../../app/api/auth/logout/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/logout/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout">
}

// Validate ../../app/api/auth/me/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/me/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/me">
}

// Validate ../../app/api/erps/mock/[resource]/route.ts
{
  const handler = {} as typeof import("../../app/api/erps/mock/[resource]/route.js")
  handler satisfies RouteHandlerConfig<"/api/erps/mock/[resource]">
}

// Validate ../../app/api/health/route.ts
{
  const handler = {} as typeof import("../../app/api/health/route.js")
  handler satisfies RouteHandlerConfig<"/api/health">
}

// Validate ../../app/api/healthz/route.ts
{
  const handler = {} as typeof import("../../app/api/healthz/route.js")
  handler satisfies RouteHandlerConfig<"/api/healthz">
}

// Validate ../../app/api/po/[id]/approve/route.ts
{
  const handler = {} as typeof import("../../app/api/po/[id]/approve/route.js")
  handler satisfies RouteHandlerConfig<"/api/po/[id]/approve">
}

// Validate ../../app/api/po/[id]/events/route.ts
{
  const handler = {} as typeof import("../../app/api/po/[id]/events/route.js")
  handler satisfies RouteHandlerConfig<"/api/po/[id]/events">
}

// Validate ../../app/api/po/[id]/route.ts
{
  const handler = {} as typeof import("../../app/api/po/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/po/[id]">
}

// Validate ../../app/api/po/[id]/submit/route.ts
{
  const handler = {} as typeof import("../../app/api/po/[id]/submit/route.js")
  handler satisfies RouteHandlerConfig<"/api/po/[id]/submit">
}

// Validate ../../app/api/po/route.ts
{
  const handler = {} as typeof import("../../app/api/po/route.js")
  handler satisfies RouteHandlerConfig<"/api/po">
}

// Validate ../../app/api/projects/[id]/route.ts
{
  const handler = {} as typeof import("../../app/api/projects/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/projects/[id]">
}

// Validate ../../app/api/projects/route.ts
{
  const handler = {} as typeof import("../../app/api/projects/route.js")
  handler satisfies RouteHandlerConfig<"/api/projects">
}

// Validate ../../app/api/suppliers/[id]/route.ts
{
  const handler = {} as typeof import("../../app/api/suppliers/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/suppliers/[id]">
}

// Validate ../../app/api/suppliers/route.ts
{
  const handler = {} as typeof import("../../app/api/suppliers/route.js")
  handler satisfies RouteHandlerConfig<"/api/suppliers">
}





// Validate ../../app/(app)/layout.tsx
{
  const handler = {} as typeof import("../../app/(app)/layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
